Index: src/main/ui/MyJournalApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\n\nimport model.DateEntry;\nimport model.MyJournal;\nimport model.Person;\nimport persistence.JsonReader;\nimport persistence.JsonWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n\n// Represents the journal application\npublic class MyJournalApp {\n    private static final String JSON_STORE = \"./data/myJournal.json\";\n    private List<Person> listOfPerson;\n    private Person newPerson;\n    private DateEntry newDate;\n    private Scanner input;\n    private MyJournal myJournal;\n    private Boolean inPeronCreation = false;\n\n    private Boolean inListOfPeople = false;\n    private JsonWriter jsonWriter;\n    private JsonReader jsonReader;\n\n    // EFFECTS: constructs journal and runs application\n    public MyJournalApp() throws FileNotFoundException {\n        input = new Scanner(System.in);\n        myJournal = new MyJournal(\"Minou's journal\");\n        jsonWriter = new JsonWriter(JSON_STORE);\n        jsonReader = new JsonReader(JSON_STORE);\n        runJournal();\n    }\n\n    // MODIFIES: this\n    // EFFECTS: processes user input\n    private void runJournal() {\n        boolean keepGoing = true;\n        String command = null;\n\n        init();\n\n        while (keepGoing) {\n            if (inPeronCreation) {\n                personDisplayMenu();\n            } else if (inListOfPeople) {\n                listOfPersonDisplayMenu();\n            } else {\n                mainDisplayMenu();\n            }\n            command = input.next();\n            command = command.toLowerCase();\n\n            if (command.equals(\"q\")) {\n                keepGoing = false;\n            } else {\n                processCommand(command);\n            }\n        }\n\n        System.out.println(\"\\nGoodbye!\");\n    }\n\n    // MODIFIES: this\n    // EFFECTS: initializes the Journal\n    private void init() {\n        listOfPerson = new ArrayList<>();\n        input = new Scanner(System.in);\n        input.useDelimiter(\"\\n\");\n    }\n\n    // MODIFIES: this\n    // EFFECTS: processes user command\n    private void processCommand(String command) {\n        if (command.equals(\"np\")) {\n            doCreatePerson();\n            inPeronCreation = true;\n            inListOfPeople = false;\n        } else if (command.equals(\"lop\")) {\n            doPrintListOfPeople();\n            inPeronCreation = false;\n        } else if (command.equals(\"+pro\")) {\n            doAddToPros();\n        } else if (command.equals(\"+con\")) {\n            doAddToCons();\n        } else if (command.equals(\"+date\")) {\n            doAddToDates();\n        } else if (command.equals(\"vu\")) {\n            doPrintProfile();\n        } else if (command.equals(\"mod\")) {\n            doModifyPerson();\n        } else if (command.equals(\"rem\")) {\n            doRemovePerson();\n            inListOfPeople = false;\n        } else if (command.equals(\"b\")) {\n            inListOfPeople = false;\n            inPeronCreation = false;\n        } else if (command.equals(\"s\")) {\n            saveMyJournal();\n        } else if (command.equals(\"l\")) {\n            loadMyJournal();\n        } else {\n            System.out.println(\"Selection not valid...\");\n        }\n    }\n\n    // MODIFIES: this\n    // EFFECTS: loads journal from file\n    private void loadMyJournal() {\n        try {\n            myJournal = jsonReader.read();\n            listOfPerson = jsonReader.read().getListOfPerson();\n            System.out.println(\"Loaded \" + myJournal.getName() + \" from \" + JSON_STORE);\n        } catch (IOException e) {\n            System.out.println(\"Unable to read from file: \" + JSON_STORE);\n        }\n    }\n\n    // EFFECTS: saves the journal to file\n    private void saveMyJournal() {\n        try {\n            jsonWriter.open();\n            jsonWriter.write(myJournal);\n            jsonWriter.close();\n            System.out.println(\"Saved \" + myJournal.getName() + \" to \" + JSON_STORE);\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Unable to write to file: \" + JSON_STORE);\n        }\n    }\n\n    private void doRemovePerson() {\n        System.out.println(\"\\nWhich candidate would you like to remove? (number)\");\n        int personNum = input.nextInt() - 1;\n        listOfPerson.remove(personNum);\n        //myJournal.remove(personNum);\n\n        System.out.println(\"Candidate \" + (personNum + 1) + \" was removed successfully.\");\n    }\n\n    private void doModifyPerson() {\n        System.out.println(\"\\nWhich candidate would you like to modify? (number)\");\n        int personNum = input.nextInt() - 1;\n        System.out.println(\"\\nHere is \" + listOfPerson.get(personNum).getName() + \"'s profile:\");\n        Person thisPerson = listOfPerson.get(personNum);\n        thisPerson.printProfile();\n        newPerson = thisPerson;\n        inPeronCreation = true;\n    }\n\n    private void doPrintProfile() {\n        System.out.println(\"\\nWhich candidate's  profile would you like to view? (number)\");\n        int personNum = input.nextInt() - 1;\n        Person thisPerson = listOfPerson.get(personNum);\n        thisPerson.printProfile();\n        newPerson = thisPerson;\n    }\n\n    private void doAddToDates() {\n        newDate = new DateEntry(newPerson.getName(), newPerson.numOfDatesWithPerson() + 1);\n        newPerson.addDateToListOfDates(newDate);\n\n        System.out.println(\"\\nYou can add some highlights to this date:\");\n        String highlight = input.next();\n        newDate.addHighlightEvent(highlight);\n\n        System.out.println(\"\\nYou can add some redflags you noticed to this date:\");\n        String redFlag = input.next();\n        newDate.addRedFlagEvent(redFlag);\n\n        System.out.println(\"\\nWould you go out with this person again? (true/false)\");\n        Boolean successStatus = input.nextBoolean();\n        newDate.setSuccessfulness(successStatus);\n\n        System.out.println(\"\\nDate \" + newDate.getDateNumber() + \" with \" + newDate.getDateName() + \" is now added!\");\n    }\n\n    private void doAddToCons() {\n        System.out.println(\"\\nWhat is a bad trait in this person that you have noticed?\");\n        String con = input.next();\n        newPerson.addToCons(con);\n        newPerson.deductOnePoint();\n    }\n\n    private void doAddToPros() {\n        System.out.println(\"\\nWhat is a good quality of this person that you have noticed?\");\n        String pro = input.next();\n        newPerson.addToPros(pro);\n        newPerson.addOnePoint();\n    }\n\n\n    public void doCreatePerson() {\n\n        System.out.println(\"\\nWhat is the name of the person you are seeing?\");\n        String name = input.next();\n        System.out.println(\"\\nHow old are they?\");\n        int age = input.nextInt();\n        System.out.println(\"\\nWhere do they live?\");\n        String location = input.next();\n        System.out.println(\"\\nWhat do they do for a living?\");\n        String job = input.next();\n\n        newPerson = new Person(name, age, location, job, 0);\n        listOfPerson.add(newPerson);\n        myJournal.addPerson(newPerson);\n        System.out.println(\"\\n\" + name + \" is now added to your list!\");\n    }\n\n    // EFFECTS: displays menu of options to user\n    private void mainDisplayMenu() {\n        System.out.println(\"\\nSelect from:\");\n        System.out.println(\"\\tnp -> create a new person\");\n        System.out.println(\"\\tlop -> see the list of people you are dating\");\n        System.out.println(\"\\ts -> save journal to file\");\n        System.out.println(\"\\tl -> load journal from file\");\n        System.out.println(\"\\tq -> quit journaling\");\n    }\n\n    private void personDisplayMenu() {\n        System.out.println(\"\\nSelect from:\");\n        System.out.println(\"\\t+pro -> Add to the list of this person's positive characteristics.\");\n        System.out.println(\"\\t+con -> Add to the list of this person's negative characteristics.\");\n        System.out.println(\"\\t+date -> Add a date or interaction you have had with this person!\uD83C\uDF77\uD83E\uDD69\");\n        System.out.println(\"\\tb -> Go to the main menu\");\n        System.out.println(\"\\tq -> quit journaling\");\n    }\n\n    private void listOfPersonDisplayMenu() {\n        System.out.println(\"\\nSelect from:\");\n        System.out.println(\"\\tvu -> View a candidate description and dates you have had with them.\");\n        System.out.println(\"\\tmod -> Modify a candidate. \uD83D\uDD27\");\n        System.out.println(\"\\trem -> Remove a person you are no longer seeing...\uD83D\uDC94\");\n        System.out.println(\"\\tnp -> Add a new person \uD83D\uDE08\");\n        System.out.println(\"\\tb -> Go to the main menu\");\n        System.out.println(\"\\tq -> quit journaling\");\n    }\n\n    // MODIFIES: this\n    // EFFECTS: prints out the list of persons user is\n    private void doPrintListOfPeople() {\n        int i = 1;\n        if (listOfPerson.isEmpty()) {\n            System.out.println(\"\\nYour list is empty. Would you like to add a new person or load your journal?\");\n            inListOfPeople = false;\n        } else {\n            for (Person p : listOfPerson) {\n                System.out.println(\"\\nCandidate \" + i + \" : \" + p.getName());\n                i++;\n            }\n            inListOfPeople = true;\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/MyJournalApp.java b/src/main/ui/MyJournalApp.java
--- a/src/main/ui/MyJournalApp.java	
+++ b/src/main/ui/MyJournalApp.java	
@@ -137,7 +137,7 @@
         System.out.println("\nWhich candidate would you like to remove? (number)");
         int personNum = input.nextInt() - 1;
         listOfPerson.remove(personNum);
-        //myJournal.remove(personNum);
+        myJournal.remove(personNum);
 
         System.out.println("Candidate " + (personNum + 1) + " was removed successfully.");
     }
